interface WalletBalance {
  currency: string;
  amount: number;
}
interface FormattedWalletBalance {
  currency: string;
  amount: number;
  formatted: string;
}

interface Props extends BoxProps {}
const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
  const prices = usePrices();

  // const getPriority = (blockchain: any): number => {
  //   switch (blockchain) {
  //     case 'Osmosis':
  //       return 100
  //     case 'Ethereum':
  //       return 50
  //     case 'Arbitrum':
  //       return 30
  //     case 'Zilliqa':
  //       return 20
  //     case 'Neo':
  //       return 20
  //     default:
  //       return -99
  //   }
  // }

  //Should put Zillique and Neo in 1 case as they return same number
  const getPriority = (blockchain: string): number => {
    switch (blockchain) {
      case "Osmosis":
        return 100;
      case "Ethereum":
        return 50;
      case "Arbitrum":
        return 30;
      case "Zilliqa":
      case "Neo":
        return 20;
      default:
        return -99;
    }
  };

  const sortedBalances = useMemo(() => {
    return balances
      .filter((balance: WalletBalance) => {
        const balancePriority = getPriority(balance.blockchain);
        // if (lhsPriority > -99) {
        // if (balance.amount <= 0) {
        // return true;
        // }
        // }
        // return false
        // WE CAN USE TERNARY OPERATOR
        return lhsPriority > -99 && balance.amount <= 0;
      })
      .sort((lhs: WalletBalance, rhs: WalletBalance) => {
        const leftPriority = getPriority(lhs.blockchain);
        const rightPriority = getPriority(rhs.blockchain);
        // if (leftPriority > rightPriority) {
        // return -1;
        // } else if (rightPriority > leftPriority) {
        // return 1;
        // }
        return rightPriority - leftPriority;
      });
  }, [balances, prices]);

  const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
    return {
      ...balance,
      formatted: balance.amount.toFixed(),
    };
  });

  const rows = sortedBalances.map(
    (balance: FormattedWalletBalance, index: number) => {
      // USE DESTRUCTERING HERE
      const { currency, amount, formatted } = balance;
      const usdValue = prices[currency] * amount;
      return (
        <WalletRow
          className={classes.row}
          key={index}
          amount={amount}
          usdValue={usdValue}
          formattedAmount={formatted}
        />
      );
    }
  );

  return <div {...rest}>{rows}</div>;
};
